   1               		.file	"lorikeet.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
  74               	.global	set
  76               	set:
  77               		.stabd	46,0,0
  79               	.Ltext1:
   1:../getset.h   **** //////////////////////////////////////////////////////
   2:../getset.h   **** //
   3:../getset.h   **** // GET/SET ABSTRACTION LAYER FOR ATTINY13
   4:../getset.h   **** //
   5:../getset.h   **** //////////////////////////////////////////////////////
   6:../getset.h   **** //
   7:../getset.h   **** // USAGE
   8:../getset.h   **** //         get(gPin) to get input state from pin
   9:../getset.h   **** //             The gPin variable can be anything from 
  10:../getset.h   **** //             PB0 to PB4 to get digital input and 
  11:../getset.h   **** //             ADC1 to ADC3 to get analog input.
  12:../getset.h   **** //             The return value can be HIGH (1) or
  13:../getset.h   **** //             LOW (0) for digital and 0..255 for analog.
  14:../getset.h   **** //
  15:../getset.h   **** //         set(sPin, value) to set state of pin
  16:../getset.h   **** //             The sPin variable can be anything from
  17:../getset.h   **** //             PB0 to PB4 to set the output (0-5V) of
  18:../getset.h   **** //             the output pin.
  19:../getset.h   **** //             The value variable can be HIGH (1) or
  20:../getset.h   **** //             LOW (0).
  21:../getset.h   **** //
  22:../getset.h   **** //
  23:../getset.h   **** // (CC) Vincent Leclerc 10/2006
  24:../getset.h   **** //
  25:../getset.h   **** //////////////////////////////////////////////////////
  26:../getset.h   **** 
  27:../getset.h   **** #include <avr/interrupt.h>
  28:../getset.h   **** 
  29:../getset.h   **** #define PB0  0
  30:../getset.h   **** #define PB1  1
  31:../getset.h   **** #define PB2  2
  32:../getset.h   **** #define PB3  3
  33:../getset.h   **** #define PB4  4
  34:../getset.h   **** 
  35:../getset.h   **** #define ADC1 11
  36:../getset.h   **** #define ADC2 12
  37:../getset.h   **** #define ADC3 13
  38:../getset.h   **** 
  39:../getset.h   **** #define HIGH 1
  40:../getset.h   **** #define LOW  0
  41:../getset.h   **** 
  42:../getset.h   **** void set(uint8_t sPin, uint8_t value){
  81               	.LM0:
  82               	.LFBB1:
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85 0000 382F      		mov r19,r24
  43:../getset.h   **** 	if (value) PORTB |= 1 << sPin; // set pin high
  87               	.LM1:
  88 0002 6623      		tst r22
  89 0004 01F0      		breq .L2
  90 0006 28B3      		in r18,56-32
  91 0008 81E0      		ldi r24,lo8(1)
  92 000a 90E0      		ldi r25,hi8(1)
  93 000c 032E      		mov r0,r19
  94 000e 00C0      		rjmp 2f
  95 0010 880F      	1:	lsl r24
  96 0012 991F      		rol r25
  97 0014 0A94      	2:	dec r0
  98 0016 02F4      		brpl 1b
  99 0018 282B      		or r18,r24
 100 001a 28BB      		out 56-32,r18
 101 001c 00C0      		rjmp .L3
 102               	.L2:
  44:../getset.h   **** 	else PORTB &= ~(1 << sPin); // set pin low
 104               	.LM2:
 105 001e 28B3      		in r18,56-32
 106 0020 81E0      		ldi r24,lo8(1)
 107 0022 90E0      		ldi r25,hi8(1)
 108 0024 032E      		mov r0,r19
 109 0026 00C0      		rjmp 2f
 110 0028 880F      	1:	lsl r24
 111 002a 991F      		rol r25
 112 002c 0A94      	2:	dec r0
 113 002e 02F4      		brpl 1b
 114 0030 8095      		com r24
 115 0032 8223      		and r24,r18
 116 0034 88BB      		out 56-32,r24
 117               	.L3:
  45:../getset.h   **** 	DDRB |= 1 << sPin; // set DDRB pin to output
 119               	.LM3:
 120 0036 27B3      		in r18,55-32
 121 0038 81E0      		ldi r24,lo8(1)
 122 003a 90E0      		ldi r25,hi8(1)
 123 003c 00C0      		rjmp 2f
 124 003e 880F      	1:	lsl r24
 125 0040 991F      		rol r25
 126 0042 3A95      	2:	dec r19
 127 0044 02F4      		brpl 1b
 128 0046 282B      		or r18,r24
 129 0048 27BB      		out 55-32,r18
 130               	/* epilogue start */
  46:../getset.h   **** }
 132               	.LM4:
 133 004a 0895      		ret
 135               	.Lscope1:
 137               		.stabd	78,0,0
 140               	.global	get
 142               	get:
 143               		.stabd	46,0,0
  47:../getset.h   **** 
  48:../getset.h   **** uint8_t get(uint8_t gPin){
 145               	.LM5:
 146               	.LFBB2:
 147               	/* prologue: function */
 148               	/* frame size = 0 */
 149 004c 282F      		mov r18,r24
  49:../getset.h   **** 	if (gPin > 9) { // analog input
 151               	.LM6:
 152 004e 8A30      		cpi r24,lo8(10)
 153 0050 00F0      		brlo .L6
  50:../getset.h   **** 		ADCSRA |= 0x88;	// enable ADC (turn on ADC power) & enable ADC interrupts
 155               	.LM7:
 156 0052 86B1      		in r24,38-32
 157 0054 8868      		ori r24,lo8(-120)
 158 0056 86B9      		out 38-32,r24
  51:../getset.h   **** 		ADMUX |= 0x20; // set to left-adjusted result
 160               	.LM8:
 161 0058 3D9A      		sbi 39-32,5
  52:../getset.h   **** 		sei(); // turn on interrupts (if not already on)	
 163               	.LM9:
 164               	/* #APP */
 165               	 ;  52 "../getset.h" 1
 166 005a 7894      		sei
 167               	 ;  0 "" 2
  53:../getset.h   **** 		ADMUX = (ADMUX & 0xFC) | (gPin-10); // set channel
 169               	.LM10:
 170               	/* #NOAPP */
 171 005c 87B1      		in r24,39-32
 172 005e 2A50      		subi r18,lo8(-(-10))
 173 0060 8C7F      		andi r24,lo8(-4)
 174 0062 822B      		or r24,r18
 175 0064 87B9      		out 39-32,r24
  54:../getset.h   **** 		ADCSRA |= 0x50;	// clear hardware "conversion complete" flag & start conversion
 177               	.LM11:
 178 0066 86B1      		in r24,38-32
 179 0068 8065      		ori r24,lo8(80)
 180 006a 86B9      		out 38-32,r24
 181               	.L7:
  55:../getset.h   **** 		while(ADCSRA & (1 << ADSC));	// wait until conversion complete
 183               	.LM12:
 184 006c 3699      		sbic 38-32,6
 185 006e 00C0      		rjmp .L7
  56:../getset.h   **** 		ADCSRA &= 0x77; // disable ADC interrupts
 187               	.LM13:
 188 0070 86B1      		in r24,38-32
 189 0072 8777      		andi r24,lo8(119)
 190 0074 86B9      		out 38-32,r24
  57:../getset.h   **** 		return (ADCH);	// read ADC (8 M.S.B.);
 192               	.LM14:
 193 0076 95B1      		in r25,37-32
 194 0078 00C0      		rjmp .L8
 195               	.L6:
  58:../getset.h   **** 	
  59:../getset.h   **** 	} else { // digital input
  60:../getset.h   **** 		DDRB  &= ~(1 << gPin); // set DDRB pin to input
 197               	.LM15:
 198 007a 37B3      		in r19,55-32
 199 007c 81E0      		ldi r24,lo8(1)
 200 007e 90E0      		ldi r25,hi8(1)
 201 0080 00C0      		rjmp 2f
 202 0082 880F      	1:	lsl r24
 203 0084 991F      		rol r25
 204 0086 2A95      	2:	dec r18
 205 0088 02F4      		brpl 1b
 206 008a 282F      		mov r18,r24
 207 008c 2095      		com r18
 208 008e 2323      		and r18,r19
 209 0090 27BB      		out 55-32,r18
  61:../getset.h   **** 		PORTB |= 1 << gPin; // pullup
 211               	.LM16:
 212 0092 28B3      		in r18,56-32
 213 0094 282B      		or r18,r24
 214 0096 28BB      		out 56-32,r18
  62:../getset.h   **** 		return PINB & (1 << gPin); // return high or low
 216               	.LM17:
 217 0098 96B3      		in r25,54-32
 218 009a 9823      		and r25,r24
 219               	.L8:
  63:../getset.h   **** 	}
  64:../getset.h   **** }
 221               	.LM18:
 222 009c 892F      		mov r24,r25
 223               	/* epilogue start */
 224 009e 0895      		ret
 226               	.Lscope2:
 228               		.stabd	78,0,0
 230               	.global	__vector_9
 232               	__vector_9:
 233               		.stabd	46,0,0
  65:../getset.h   **** 
  66:../getset.h   **** SIGNAL(SIG_ADC)
  67:../getset.h   **** {
 235               	.LM19:
 236               	.LFBB3:
 237 00a0 1F92      		push __zero_reg__
 238 00a2 0F92      		push r0
 239 00a4 0FB6      		in r0,__SREG__
 240 00a6 0F92      		push r0
 241 00a8 1124      		clr __zero_reg__
 242               	/* prologue: Signal */
 243               	/* frame size = 0 */
 244               	/* epilogue start */
  68:../getset.h   **** 	// need this for the ADC to work properly	
  69:../getset.h   **** }
 246               	.LM20:
 247 00aa 0F90      		pop r0
 248 00ac 0FBE      		out __SREG__,r0
 249 00ae 0F90      		pop r0
 250 00b0 1F90      		pop __zero_reg__
 251 00b2 1895      		reti
 253               	.Lscope3:
 255               		.stabd	78,0,0
 257               	.global	playTone
 259               	playTone:
 260               		.stabd	46,0,0
 262               	.Ltext2:
   1:lorikeet.c    **** #include <avr/io.h>
   2:lorikeet.c    **** #include <avr/signal.h>
   3:lorikeet.c    **** #include <util/delay.h>
   4:lorikeet.c    **** #include "../getset.h"
   5:lorikeet.c    **** 
   6:lorikeet.c    **** /* the LORIKEET reacts to light.
   7:lorikeet.c    ****  * the lighter it gets, the more chirps it emits in a row
   8:lorikeet.c    ****  * the lorikeet also gets tired from chirping, so also takes a proporionnally
   9:lorikeet.c    ****  * long rest after long chirps
  10:lorikeet.c    ****  * when it gets darker, the chirps are less repeated, but iterated over
  11:lorikeet.c    ****  * faster
  12:lorikeet.c    ****  */
  13:lorikeet.c    **** 
  14:lorikeet.c    **** // TONES  ==========================================
  15:lorikeet.c    **** // Start by defining the relationship between 
  16:lorikeet.c    **** //       note, period, &  frequency. 
  17:lorikeet.c    **** #define  lb    4065    // 246 Hz
  18:lorikeet.c    **** #define  c     3830    // 261 Hz
  19:lorikeet.c    **** #define  d     3400    // 294 Hz
  20:lorikeet.c    **** #define  ds    3215    // 311 Hz
  21:lorikeet.c    **** #define  e     3038    // 329 Hz
  22:lorikeet.c    **** #define  f     2864    // 349 Hz
  23:lorikeet.c    **** #define  fs    2702    // 370 Hz
  24:lorikeet.c    **** #define  g     2550    // 392 Hz
  25:lorikeet.c    **** #define  a     2272    // 440 Hz
  26:lorikeet.c    **** #define  as    2145    // 446 Hz
  27:lorikeet.c    **** #define  b     2028    // 493 Hz
  28:lorikeet.c    **** #define  C     1912    // 523 Hz
  29:lorikeet.c    **** #define  CS    1805    // 554 Hz
  30:lorikeet.c    **** #define  D     1702    // 587 Hz
  31:lorikeet.c    **** #define  DS    1608    // 622 Hz
  32:lorikeet.c    **** #define  E     1516    // 659 Hz
  33:lorikeet.c    **** #define  F     1432    // 698 Hz
  34:lorikeet.c    **** #define  G     1277    // 783 Hz
  35:lorikeet.c    **** #define  A     1136    // 880 Hz
  36:lorikeet.c    **** // Define a special note, 'R', to represent a rest
  37:lorikeet.c    **** 
  38:lorikeet.c    **** // MELODY and TIMING  =======================================
  39:lorikeet.c    **** //  melody[] is an array of notes, accompanied by beats[], 
  40:lorikeet.c    **** //  which sets each note's relative length (higher #, longer note) 
  41:lorikeet.c    **** uint16_t melody[] = {D, 15000};
  42:lorikeet.c    **** uint8_t beats[]   = {12, 4};
  43:lorikeet.c    **** 
  44:lorikeet.c    **** uint16_t max_count = sizeof(melody); // Melody length, for looping.
  45:lorikeet.c    **** 
  46:lorikeet.c    **** // Set overall tempo
  47:lorikeet.c    **** //uint16_t tempo = 1000;
  48:lorikeet.c    **** uint16_t tempo = 315;
  49:lorikeet.c    **** 
  50:lorikeet.c    **** // Initialize core variables
  51:lorikeet.c    **** uint8_t tone = 0;
  52:lorikeet.c    **** uint8_t beat = 0;
  53:lorikeet.c    **** uint32_t duration  = 0;
  54:lorikeet.c    **** 
  55:lorikeet.c    **** uint16_t i;
  56:lorikeet.c    **** uint16_t j;
  57:lorikeet.c    **** 
  58:lorikeet.c    **** // PLAY TONE  ==============================================
  59:lorikeet.c    **** // Pulse the speaker to play a tone for a particular duration
  60:lorikeet.c    **** void playTone(void) {
 264               	.LM21:
 265               	.LFBB4:
 266 00b4 AF92      		push r10
 267 00b6 BF92      		push r11
 268 00b8 CF92      		push r12
 269 00ba DF92      		push r13
 270 00bc EF92      		push r14
 271 00be FF92      		push r15
 272 00c0 0F93      		push r16
 273 00c2 1F93      		push r17
 274               	/* prologue: function */
 275               	/* frame size = 0 */
  61:lorikeet.c    ****   uint32_t elapsed_time = 0;
  62:lorikeet.c    ****   if (tone > 0) { // if this isn't a Rest beat, while the tone has 
 277               	.LM22:
 278 00c4 2091 0000 		lds r18,tone
 279 00c8 2223      		tst r18
 280 00ca 01F4      		brne .+2
 281 00cc 00C0      		rjmp .L21
  63:lorikeet.c    ****     //  played less long than 'duration', pulse speaker HIGH and LOW
  64:lorikeet.c    ****     while (elapsed_time < duration) {
 283               	.LM23:
 284 00ce A090 0000 		lds r10,duration
 285 00d2 B090 0000 		lds r11,(duration)+1
 286 00d6 C090 0000 		lds r12,(duration)+2
 287 00da D090 0000 		lds r13,(duration)+3
 288 00de A091 0000 		lds r26,i
 289 00e2 8091 0000 		lds r24,i+1
 290 00e6 40E0      		ldi r20,lo8(0)
 291 00e8 50E0      		ldi r21,hi8(0)
 292 00ea 60E0      		ldi r22,hlo8(0)
 293 00ec 70E0      		ldi r23,hhi8(0)
  65:lorikeet.c    ****       
  66:lorikeet.c    ****       set(PB3, 1); //pull PB3 high
  67:lorikeet.c    ****       for (i=0; i<tone; i++) asm volatile("nop\n\t"::); //pause
 295               	.LM24:
 296 00ee E22F      		mov r30,r18
 297 00f0 F0E0      		ldi r31,lo8(0)
  68:lorikeet.c    ****       set(PB3, 0); // pull PB3 low
  69:lorikeet.c    ****       for (i=0; i<tone; i++) asm volatile("nop\n\t"::); //pause
 299               	.LM25:
 300 00f2 E22E      		mov r14,r18
 301 00f4 FF24      		clr r15
 302 00f6 00E0      		ldi r16,lo8(0)
 303 00f8 10E0      		ldi r17,hi8(0)
 304 00fa 00C0      		rjmp .L15
 305               	.L20:
 306               	.LBB17:
 307               	.LBB18:
 309               	.Ltext3:
 311               	.LM26:
 312 00fc C39A      		sbi 56-32,3
 314               	.LM27:
 315 00fe BB9A      		sbi 55-32,3
 316 0100 20E0      		ldi r18,lo8(0)
 317 0102 30E0      		ldi r19,hi8(0)
 318 0104 00C0      		rjmp .L16
 319               	.L17:
 320               	.LBE18:
 321               	.LBE17:
 323               	.Ltext4:
 325               	.LM28:
 326               	/* #APP */
 327               	 ;  67 "lorikeet.c" 1
 328 0106 0000      		nop
 329               		
 330               	 ;  0 "" 2
 331               	/* #NOAPP */
 332 0108 2F5F      		subi r18,lo8(-(1))
 333 010a 3F4F      		sbci r19,hi8(-(1))
 334               	.L16:
 335 010c CF01      		movw r24,r30
 336 010e AE2F      		mov r26,r30
 337 0110 892F      		mov r24,r25
 338 0112 2E17      		cp r18,r30
 339 0114 3F07      		cpc r19,r31
 340 0116 00F0      		brlo .L17
 341               	.LBB19:
 342               	.LBB20:
 344               	.Ltext5:
 346               	.LM29:
 347 0118 C398      		cbi 56-32,3
 349               	.LM30:
 350 011a BB9A      		sbi 55-32,3
 351 011c 20E0      		ldi r18,lo8(0)
 352 011e 30E0      		ldi r19,hi8(0)
 353 0120 00C0      		rjmp .L18
 354               	.L19:
 355               	.LBE20:
 356               	.LBE19:
 358               	.Ltext6:
 360               	.LM31:
 361               	/* #APP */
 362               	 ;  69 "lorikeet.c" 1
 363 0122 0000      		nop
 364               		
 365               	 ;  0 "" 2
 366               	/* #NOAPP */
 367 0124 2F5F      		subi r18,lo8(-(1))
 368 0126 3F4F      		sbci r19,hi8(-(1))
 369               	.L18:
 370 0128 2E17      		cp r18,r30
 371 012a 3F07      		cpc r19,r31
 372 012c 00F0      		brlo .L19
 373 012e 4E0D      		add r20,r14
 374 0130 5F1D      		adc r21,r15
 375 0132 601F      		adc r22,r16
 376 0134 711F      		adc r23,r17
 377               	.L15:
 379               	.LM32:
 380 0136 4A15      		cp r20,r10
 381 0138 5B05      		cpc r21,r11
 382 013a 6C05      		cpc r22,r12
 383 013c 7D05      		cpc r23,r13
 384 013e 00F0      		brlo .L20
 385 0140 A093 0000 		sts i,r26
 386 0144 8093 0000 		sts i+1,r24
 387               	.L21:
 388               	/* epilogue start */
  70:lorikeet.c    **** 
  71:lorikeet.c    ****       // Keep track of how long we pulsed
  72:lorikeet.c    ****       elapsed_time += (tone);
  73:lorikeet.c    ****     } 
  74:lorikeet.c    ****   }
  75:lorikeet.c    **** }
 390               	.LM33:
 391 0148 1F91      		pop r17
 392 014a 0F91      		pop r16
 393 014c FF90      		pop r15
 394 014e EF90      		pop r14
 395 0150 DF90      		pop r13
 396 0152 CF90      		pop r12
 397 0154 BF90      		pop r11
 398 0156 AF90      		pop r10
 399 0158 0895      		ret
 404               	.Lscope4:
 406               		.stabd	78,0,0
 413               	.global	map
 415               	map:
 416               		.stabd	46,0,0
  76:lorikeet.c    **** 
  77:lorikeet.c    **** uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
  78:lorikeet.c    **** {
 418               	.LM34:
 419               	.LFBB5:
 420 015a 2F92      		push r2
 421 015c 3F92      		push r3
 422 015e 4F92      		push r4
 423 0160 5F92      		push r5
 424 0162 6F92      		push r6
 425 0164 7F92      		push r7
 426 0166 8F92      		push r8
 427 0168 9F92      		push r9
 428 016a AF92      		push r10
 429 016c BF92      		push r11
 430 016e CF92      		push r12
 431 0170 DF92      		push r13
 432 0172 EF92      		push r14
 433 0174 FF92      		push r15
 434 0176 0F93      		push r16
 435 0178 1F93      		push r17
 436 017a DF93      		push r29
 437 017c CF93      		push r28
 438 017e CDB7      		in r28,__SP_L__
 439 0180 DEB7      		in r29,__SP_H__
 440               	/* prologue: function */
 441               	/* frame size = 0 */
 442 0182 3B01      		movw r6,r22
 443 0184 4C01      		movw r8,r24
 444 0186 1901      		movw r2,r18
 445 0188 2A01      		movw r4,r20
 446 018a 6D89      		ldd r22,Y+21
 447 018c 7E89      		ldd r23,Y+22
 448 018e 8F89      		ldd r24,Y+23
 449 0190 988D      		ldd r25,Y+24
 451               	.LM35:
 452 0192 6A19      		sub r22,r10
 453 0194 7B09      		sbc r23,r11
 454 0196 8C09      		sbc r24,r12
 455 0198 9D09      		sbc r25,r13
 456 019a 621A      		sub r6,r18
 457 019c 730A      		sbc r7,r19
 458 019e 840A      		sbc r8,r20
 459 01a0 950A      		sbc r9,r21
 460 01a2 A401      		movw r20,r8
 461 01a4 9301      		movw r18,r6
 462 01a6 00D0      		rcall __mulsi3
 463 01a8 E218      		sub r14,r2
 464 01aa F308      		sbc r15,r3
 465 01ac 0409      		sbc r16,r4
 466 01ae 1509      		sbc r17,r5
 467 01b0 A801      		movw r20,r16
 468 01b2 9701      		movw r18,r14
 469 01b4 00D0      		rcall __udivmodsi4
 470 01b6 2A0D      		add r18,r10
 471 01b8 3B1D      		adc r19,r11
 472 01ba 4C1D      		adc r20,r12
 473 01bc 5D1D      		adc r21,r13
  79:lorikeet.c    ****   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  80:lorikeet.c    **** }
 475               	.LM36:
 476 01be B901      		movw r22,r18
 477 01c0 CA01      		movw r24,r20
 478               	/* epilogue start */
 479 01c2 CF91      		pop r28
 480 01c4 DF91      		pop r29
 481 01c6 1F91      		pop r17
 482 01c8 0F91      		pop r16
 483 01ca FF90      		pop r15
 484 01cc EF90      		pop r14
 485 01ce DF90      		pop r13
 486 01d0 CF90      		pop r12
 487 01d2 BF90      		pop r11
 488 01d4 AF90      		pop r10
 489 01d6 9F90      		pop r9
 490 01d8 8F90      		pop r8
 491 01da 7F90      		pop r7
 492 01dc 6F90      		pop r6
 493 01de 5F90      		pop r5
 494 01e0 4F90      		pop r4
 495 01e2 3F90      		pop r3
 496 01e4 2F90      		pop r2
 497 01e6 0895      		ret
 500               	.Lscope5:
 502               		.stabd	78,0,0
 504               	.global	main
 506               	main:
 507               		.stabd	46,0,0
  81:lorikeet.c    **** 
  82:lorikeet.c    **** int main(void){
 509               	.LM37:
 510               	.LFBB6:
 511 01e8 AF92      		push r10
 512 01ea BF92      		push r11
 513 01ec CF92      		push r12
 514 01ee DF92      		push r13
 515 01f0 EF92      		push r14
 516 01f2 FF92      		push r15
 517 01f4 0F93      		push r16
 518 01f6 1F93      		push r17
 519 01f8 CF93      		push r28
 520 01fa DF93      		push r29
 521               	/* prologue: function */
 522               	/* frame size = 0 */
 523               	.LBB21:
 524               	.LBB22:
 526               	.Ltext7:
 528               	.LM38:
 529 01fc C398      		cbi 56-32,3
 531               	.LM39:
 532 01fe BB9A      		sbi 55-32,3
 533               	.L31:
 534               	.LBE22:
 535               	.LBE21:
 537               	.Ltext8:
  83:lorikeet.c    ****   //initialize GPIO pins
  84:lorikeet.c    ****   set(PB3, 0);//set pb3 low
  85:lorikeet.c    ****   
  86:lorikeet.c    ****   //declare and initialize variables
  87:lorikeet.c    ****   int32_t pause;
  88:lorikeet.c    ****   int16_t repetition;
  89:lorikeet.c    ****   //change this number to change the frequency
  90:lorikeet.c    ****   //main loop
  91:lorikeet.c    ****   while(1){    
  92:lorikeet.c    ****     
  93:lorikeet.c    ****     repetition = get(ADC1)/2;
 539               	.LM40:
 540 0200 8BE0      		ldi r24,lo8(11)
 541 0202 00D0      		rcall get
 542 0204 8695      		lsr r24
 543 0206 A82E      		mov r10,r24
 544 0208 BB24      		clr r11
 545 020a EE24      		clr r14
 546 020c FF24      		clr r15
 547 020e 00C0      		rjmp .L25
 548               	.L28:
 549               	.LBB23:
 550               	.LBB24:
 551               	.LBB25:
 553               	.Ltext9:
 555               	.LM41:
 556 0210 C19A      		sbi 56-32,1
 558               	.LM42:
 559 0212 B99A      		sbi 55-32,1
 560 0214 00E0      		ldi r16,lo8(melody)
 561 0216 10E0      		ldi r17,hi8(melody)
 562 0218 C0E0      		ldi r28,lo8(0)
 563 021a D0E0      		ldi r29,hi8(0)
 564 021c 00C0      		rjmp .L26
 565               	.L27:
 566               	.LBE25:
 567               	.LBE24:
 568               	.LBB26:
 570               	.Ltext10:
  94:lorikeet.c    ****     
  95:lorikeet.c    ****     for (int j = 0; j<repetition; j++){
  96:lorikeet.c    ****       set(PB1, HIGH);
  97:lorikeet.c    ****       for (int i=0; i<max_count; i++) {
  98:lorikeet.c    ****         tone = melody[i];
 572               	.LM43:
 573 021e F801      		movw r30,r16
 574 0220 8081      		ld r24,Z
 575 0222 8093 0000 		sts tone,r24
  99:lorikeet.c    ****         beat = beats[i];
 577               	.LM44:
 578 0226 FE01      		movw r30,r28
 579 0228 E050      		subi r30,lo8(-(beats))
 580 022a F040      		sbci r31,hi8(-(beats))
 581 022c 8081      		ld r24,Z
 582 022e 8093 0000 		sts beat,r24
 100:lorikeet.c    ****         //tempo = get(ADC1);
 101:lorikeet.c    ****         //tempo *= 2;
 102:lorikeet.c    ****         duration = beat * tempo; // Set up timing
 584               	.LM45:
 585 0232 6091 0000 		lds r22,tempo
 586 0236 7091 0000 		lds r23,(tempo)+1
 587 023a 90E0      		ldi r25,lo8(0)
 588 023c 00D0      		rcall __mulhi3
 589 023e A0E0      		ldi r26,lo8(0)
 590 0240 B0E0      		ldi r27,hi8(0)
 591 0242 8093 0000 		sts duration,r24
 592 0246 9093 0000 		sts (duration)+1,r25
 593 024a A093 0000 		sts (duration)+2,r26
 594 024e B093 0000 		sts (duration)+3,r27
 103:lorikeet.c    ****         
 104:lorikeet.c    ****         playTone();
 596               	.LM46:
 597 0252 00D0      		rcall playTone
 599               	.LM47:
 600 0254 2196      		adiw r28,1
 601 0256 0E5F      		subi r16,lo8(-(2))
 602 0258 1F4F      		sbci r17,hi8(-(2))
 603               	.L26:
 604 025a 8091 0000 		lds r24,max_count
 605 025e 9091 0000 		lds r25,(max_count)+1
 606 0262 C817      		cp r28,r24
 607 0264 D907      		cpc r29,r25
 608 0266 00F0      		brlo .L27
 609               	.LBE26:
 610               	.LBB27:
 611               	.LBB28:
 613               	.Ltext11:
 615               	.LM48:
 616 0268 C198      		cbi 56-32,1
 618               	.LM49:
 619 026a B99A      		sbi 55-32,1
 620               	.LBE28:
 621               	.LBE27:
 623               	.Ltext12:
 105:lorikeet.c    ****         
 106:lorikeet.c    ****         // A pause between chirps
 107:lorikeet.c    ****       }
 108:lorikeet.c    ****       
 109:lorikeet.c    ****       set(PB1, LOW);
 110:lorikeet.c    ****       pause = map(get(ADC1), 0, 255, 0, 7500000);
 625               	.LM50:
 626 026c 8BE0      		ldi r24,lo8(11)
 627 026e 00D0      		rcall get
 628 0270 90E0      		ldi r25,lo8(0)
 629 0272 A0E0      		ldi r26,lo8(0)
 630 0274 B0E0      		ldi r27,hi8(0)
 631 0276 BC01      		movw r22,r24
 632 0278 CD01      		movw r24,r26
 633 027a 20EE      		ldi r18,lo8(7500000)
 634 027c 30E7      		ldi r19,hi8(7500000)
 635 027e 42E7      		ldi r20,hlo8(7500000)
 636 0280 50E0      		ldi r21,hhi8(7500000)
 637 0282 00D0      		rcall __mulsi3
 638 0284 2FEF      		ldi r18,lo8(255)
 639 0286 30E0      		ldi r19,hi8(255)
 640 0288 40E0      		ldi r20,hlo8(255)
 641 028a 50E0      		ldi r21,hhi8(255)
 642 028c 00D0      		rcall __udivmodsi4
 643 028e 6901      		movw r12,r18
 644 0290 8A01      		movw r16,r20
 646               	.LM51:
 647 0292 0894      		sec
 648 0294 E11C      		adc r14,__zero_reg__
 649 0296 F11C      		adc r15,__zero_reg__
 650               	.L25:
 651 0298 EA14      		cp r14,r10
 652 029a FB04      		cpc r15,r11
 653 029c 04F4      		brge .+2
 654 029e 00C0      		rjmp .L28
 655 02a0 C601      		movw r24,r12
 656 02a2 D801      		movw r26,r16
 657 02a4 20E0      		ldi r18,lo8(0)
 658 02a6 30E0      		ldi r19,hi8(0)
 659 02a8 40E0      		ldi r20,hlo8(0)
 660 02aa 50E0      		ldi r21,hhi8(0)
 661 02ac 00C0      		rjmp .L29
 662               	.L33:
 663               	.LBE23:
 664               	.LBB29:
 111:lorikeet.c    ****     }
 112:lorikeet.c    ****     
 113:lorikeet.c    ****     for(uint32_t j = 0; j < pause; j++) asm volatile("nop\n\t"::); //pause
 666               	.LM52:
 667               	/* #APP */
 668               	 ;  113 "lorikeet.c" 1
 669 02ae 0000      		nop
 670               		
 671               	 ;  0 "" 2
 672               	/* #NOAPP */
 673 02b0 2F5F      		subi r18,lo8(-(1))
 674 02b2 3F4F      		sbci r19,hi8(-(1))
 675 02b4 4F4F      		sbci r20,hlo8(-(1))
 676 02b6 5F4F      		sbci r21,hhi8(-(1))
 677               	.L29:
 678 02b8 2817      		cp r18,r24
 679 02ba 3907      		cpc r19,r25
 680 02bc 4A07      		cpc r20,r26
 681 02be 5B07      		cpc r21,r27
 682 02c0 00F0      		brlo .+2
 683 02c2 00C0      		rjmp .L31
 684 02c4 00C0      		rjmp .L33
 685               	.LBE29:
 699               	.Lscope6:
 701               		.stabd	78,0,0
 702               	.global	melody
 703               		.data
 706               	melody:
 707 0000 A606      		.word	1702
 708 0002 983A      		.word	15000
 709               	.global	beats
 712               	beats:
 713 0004 0C        		.byte	12
 714 0005 04        		.byte	4
 715               	.global	max_count
 718               	max_count:
 719 0006 0400      		.word	4
 720               	.global	tempo
 723               	tempo:
 724 0008 3B01      		.word	315
 725               	.global	tone
 726               	.global	tone
 727               		.section .bss
 730               	tone:
 731 0000 00        		.skip 1,0
 732               	.global	beat
 733               	.global	beat
 736               	beat:
 737 0001 00        		.skip 1,0
 738               	.global	duration
 739               	.global	duration
 742               	duration:
 743 0002 0000 0000 		.skip 4,0
 744               		.comm i,2,1
 745               		.comm j,2,1
 755               		.text
 757               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lorikeet.c
     /tmp/cc2jayuM.s:2      *ABS*:0000003f __SREG__
     /tmp/cc2jayuM.s:3      *ABS*:0000003e __SP_H__
     /tmp/cc2jayuM.s:4      *ABS*:0000003d __SP_L__
     /tmp/cc2jayuM.s:5      *ABS*:00000034 __CCP__
     /tmp/cc2jayuM.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cc2jayuM.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cc2jayuM.s:76     .text:00000000 set
     /tmp/cc2jayuM.s:142    .text:0000004c get
     /tmp/cc2jayuM.s:232    .text:000000a0 __vector_9
     /tmp/cc2jayuM.s:259    .text:000000b4 playTone
     /tmp/cc2jayuM.s:730    .bss:00000000 tone
     /tmp/cc2jayuM.s:742    .bss:00000002 duration
                            *COM*:00000002 i
     /tmp/cc2jayuM.s:415    .text:0000015a map
     /tmp/cc2jayuM.s:506    .text:000001e8 main
     /tmp/cc2jayuM.s:706    .data:00000000 melody
     /tmp/cc2jayuM.s:712    .data:00000004 beats
     /tmp/cc2jayuM.s:736    .bss:00000001 beat
     /tmp/cc2jayuM.s:723    .data:00000008 tempo
     /tmp/cc2jayuM.s:718    .data:00000006 max_count
                            *COM*:00000002 j

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__mulsi3
__udivmodsi4
__mulhi3
